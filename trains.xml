<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here

const int LIGHTS = 14;
const int TRAINS = 3;
const int SWITCHES = 6;


bool oneGreen;

typedef int[0,TRAINS-1] t_id;
typedef int[0,LIGHTS-1] l_id;
typedef int[0,SWITCHES-1] s_id;


urgent broadcast chan init_all;

bool trainMoved;

chan switchChan[SWITCHES];
chan lightChanOn[LIGHTS];
chan lightChanOff[LIGHTS];


//To find the next position, we need the current direction and position of the train.
typedef struct{
	bool dir;
	int pos;
	bool on; //true means green
} Light;

typedef struct{
	bool switch; //If there is a switch or not
	bool switchDir; //Direction of the switch. True means there are two ways to the right.
	bool switchUp; //If switch is up or straight. True means it is angled.
	int position; //Where the node is located
	int nextPosRight; //Node connected to the right
	int nextPosLeft; //Node connected to the left
	int nextPosSwitch; //Switch default way is where it is not angled
	int secLength;
	Light stopLightRight; //Light for the right side
	Light stopLightLeft; //Light for the left side
} Node;

typedef struct{
	int pos;
	int goal;
	bool dir;
	int secPos;
} STrain;

Node graph[17];

Light lights[LIGHTS];
STrain trains[TRAINS];

int switches[SWITCHES]; // Position of switch

void updateLight(l_id id, bool on){
	int pos = lights[id].pos;
	bool dir = lights[id].dir;

	if(pos != 0){
		if(dir){ //Right side
			graph[pos-1].stopLightRight.on = on;
		}else{
			graph[pos-1].stopLightLeft.on = on;
		}
	}

}

bool canSwitch(s_id id){


	//Can only move a switch if there is no train on it
	int i;

	for(i = 0; i &lt; TRAINS; i++){
		if(trains[i].pos == switches[id]) return false;
	}

	return true;
}


void updateSwitch(s_id id, bool angled){


	graph[switches[id]-1].switchUp = angled;	

}



bool hasTrain(l_id id){ //Only allow the light to change to green if there is a train waiting.
	int pos = lights[id].pos;	
	bool dir = lights[id].dir;
	int i = 0;

	//Search for a train in the correct position
	for(i = 0; i &lt; TRAINS; i++){
		if(trains[i].pos == pos &amp;&amp; trains[i].dir == dir){
			return true;
		}
	}
	return false;
}


bool canMove(t_id id){ //We here see if there is a stop light on

	int pos = trains[id].pos; //3
	bool dir = trains[id].dir;//0
	int secPos = trains[id].secPos;

	//if(pos == trains[id].goal) return false;

	if(pos != 0){
		Node current = graph[pos-1];
		bool lastFifty = 50 &gt;= current.secLength - secPos;
		if(dir == true){ //Going right
			Light light = current.stopLightRight;
			return light.on or lastFifty;
		}else{
			Light light = current.stopLightLeft;
			return light.on or lastFifty;
		}

	}

	return false;
}

bool trainCrashed(t_id id){

	int pos = trains[id].pos;
	int goal = trains[id].goal;
	bool dir = trains[id].dir;


	int i;

	Node node;

	Node nextNode;

	if(pos == trains[id].goal) return false;

	if(pos == 0) return true;

	//Check that no two trains are at the same point
	

	node = graph[pos-1];
	for (i= 0; i &lt; TRAINS; i++){
		if(trains[i].pos == pos &amp;&amp; pos != trains[id].pos){
			return true;
		}
	}



	if(dir){ //Moving right
		//First check if light is on:
		if(!graph[pos-1].stopLightRight.on) return false;
		if(node.nextPosRight != 0){
			nextNode = graph[node.nextPosRight-1];
		}
	}else{
		if(!graph[pos-1].stopLightLeft.on) return false;
		if(node.nextPosLeft != 0){
			nextNode = graph[node.nextPosLeft-1];
		}
	}




	if( nextNode.switch){ //If it is a switch it can be the wrong way.
		if(nextNode.switchDir != dir){
			if(nextNode.switchUp){ //If switch is angled
				if(nextNode.nextPosSwitch != pos){//If not the right place
					return true;
				}
			}else{
				if(dir){
					if(nextNode.nextPosLeft != pos){//If not the right place
						return true;
					}
				}else{
					if(nextNode.nextPosRight != pos){//If not the right place
						return true;
					}
				}
			}
		}
	}

	return false;
}



bool initGraph(){//All lights are red as default. If there is no light, it is green


	Light tl =  {0,0,1}; 




    //Lights
	Light lights30l = {1,1,0}; //Dir, pos, on
	Light lights30r = {0,1,0};

    Light lights10l = {1,15,0}; //Dir, pos, on
	Light lights10r = {0,15,0};
    
    Light lights14l = {1,17,0}; //Dir, pos, on
	Light lights14r = {0,17,0};

	Light lights12l = {1,16,0}; //Dir, pos, on
	Light lights12r = {0,16,0};

    Light lights32l = {1,3,0}; //Dir, pos, on
	Light lights32r = {0,3,0};

	Light lights21l = {1,10,0}; //Dir, pos, on
	Light lights21r = {0,10,0};

    Light lights34l = {1,5,0}; //Dir, pos, on
	Light lights34r = {0,5,0};

    //Trains
	STrain train1 = {15,17,true,0}; //pos, goal, dir. Moving right. section possition
	STrain train2 = {1,5,true,0}; //Moving right
	STrain train3 = {5,15,false,0}; //Moving left
	//STrain train4 = {17,1,false,0}; //Moving left

    //Tracks
	Node s30    = {0,0,0, 1, 2, 0, 0,200,lights30l,lights30r}; //switch, swichDir, switchUp, position, nextPosRight, nextPosLeft, nextPosSwitch, posLength, lightRight, lightLeft;
	Node s31    = {1,1,0, 2, 3, 1, 8,200,tl,tl};
	Node s32    = {0,0,0, 3, 4, 2, 0,200,lights32l,lights32r};
	Node s33    = {1,0,0, 4, 5, 3, 6,200,tl,tl};
    Node s34    = {0,0,0, 5, 0, 4, 0,200,lights34l,lights34r};
    Node s22m   = {0,0,0, 6, 4, 7, 0,200,tl,tl};
    Node s22    = {1,1,0, 7,11,10, 6,200,tl,tl};
    Node s20p   = {0,0,0, 8, 9, 2, 0,200,tl,tl};
    Node s20    = {1,0,0, 9,10, 8,13,200,tl,tl};
    Node s21    = {0,0,0,10, 7, 9, 0,200,lights21l,lights21r};
    Node s22p   = {0,0,0,11,12,11, 0,200,tl,tl};
    Node s13    = {1,0,0,12,17,16,11,200,tl,tl};
    Node s20m   = {0,0,0,13, 9,14, 0,200,tl,tl};
    Node s11    = {1,1,0,14,16,15,13,200,tl,tl};
    Node s10    = {0,0,0,15,14, 0, 0,200,lights10l,lights10r};
    Node s12    = {0,0,0,16,12,14, 0,200,lights12l,lights12r};
    Node s14    = {0,0,0,17, 0,12, 0,200,lights14l,lights14r};


	trains[0] = train1;
	trains[1] = train2;
	trains[2] = train3;
	//trains[3] = train4;



    

	switches[0] = 2;
    switches[1] = 4;
    switches[2] = 7;
    switches[3] = 9;
    switches[4] = 12;
    switches[5] = 14;
    

	lights[0] = lights30l;
	lights[1] = lights30r;

	lights[2] = lights32l;
	lights[3] = lights32r;

	lights[4] = lights34l;
	lights[5] = lights34r;

	lights[6] = lights21l;
	lights[7] = lights21r;

	lights[8] = lights10l;
	lights[9] = lights10r;

    lights[10] = lights12l;
	lights[11] = lights12r;

    lights[12] = lights14l;
	lights[13] = lights14r;








	graph[0]  = s30;
	graph[1]  = s31;
	graph[2]  = s32;
	graph[3]  = s33;
    graph[4]  = s34;
    graph[5]  = s22m;
    graph[6]  = s22;
    graph[7]  = s20p;
    graph[8]  = s20;
    graph[9]  = s21;
    graph[10] = s22p;
    graph[11] = s13;
    graph[12] = s20m;
    graph[13] = s11;
    graph[14] = s10;
    graph[15] = s12;
    graph[16] = s14;
    



	return true;

}

int newPos(t_id id){
	bool dir = trains[id].dir;
	int curPos = trains[id].pos;
	int nextPos = 0;


	//if(curPos &gt; 0 &amp;&amp; curPos &lt; 18){
	
		Node curNode = graph[curPos-1]; //-1 as we use place 0 as a special place	

		if(!curNode.switch){//If not a switch we move in the right way.
			if(dir){ //When going right
				nextPos = curNode.nextPosRight;
			}else{
				nextPos = curNode.nextPosLeft;
			}
		}else{//If it is a switch, we need to know if we go the right direction and what position the switch is

			if (curNode.switchDir == dir){ //When branch out is in the same direction as train is going
				if(curNode.switchUp){ //When switch is alternative track
					nextPos = curNode.nextPosSwitch;
				}else{
					if(dir){ //When going right
						nextPos = curNode.nextPosRight;
					}else{
						nextPos = curNode.nextPosLeft;
					}
				}
			}else{
				if(dir){ //When going right
					nextPos = curNode.nextPosRight;
				}else{
					nextPos = curNode.nextPosLeft;
				}
			}
		}
	//}

	trains[id].pos = nextPos;
	return nextPos;
}

void newSecPos(t_id id, int dist){

	int secPos = trains[id].secPos;
	int newpos;
	if (dist &lt;= secPos){
		trains[id].secPos = secPos-dist;
	}else{
		//newpos = 
		newPos(id);
		newpos = trains[id].pos;
		if(newpos != 0){
			trains[id].secPos = graph[newpos-1].secLength - dist + secPos;
		}
	}
}











</declaration><template><name x="5" y="5">Train</name><parameter>t_id id</parameter><declaration>// Place local declarations here.
//int pos;
clock time;

urgent broadcast chan go;</declaration><location id="id0" x="0" y="8"><name x="-40" y="-24">Stopping</name><label kind="invariant" x="-40" y="24">time &lt;= 10</label></location><location id="id1" x="0" y="-104"><name x="-32" y="-136">Starting</name><label kind="invariant" x="-40" y="-88">time &lt;= 10</label></location><location id="id2" x="-312" y="-104"><name x="-322" y="-134">Init</name></location><location id="id3" x="0" y="104"><name x="-24" y="120">Crash</name></location><location id="id4" x="192" y="-24"><name x="168" y="-56">Move</name><label kind="invariant" x="184" y="-72">time &lt;=5</label></location><location id="id5" x="-176" y="-32"><name x="-192" y="-64">Stop</name></location><init ref="id2"/><transition controllable="false" action=""><source ref="id1"/><target ref="id3"/><label kind="guard" x="-120" y="32">trainCrashed(id)</label><label kind="synchronisation" x="-72" y="48">go!</label><nail x="-64" y="40"/></transition><transition controllable="false" action=""><source ref="id0"/><target ref="id3"/><label kind="guard" x="16" y="32">trainCrashed(id)</label><label kind="synchronisation" x="16" y="48">go!</label></transition><transition controllable="false" action=""><source ref="id1"/><target ref="id0"/><label kind="guard" x="-48" y="-72">time == 10 and
!canMove(id)</label><label kind="assignment" x="-64" y="-48">time = 0,
newSecPos(id, 50)</label></transition><transition controllable="false" action=""><source ref="id1"/><target ref="id4"/><label kind="guard" x="32" y="-120">time == 10 and
canMove(id)</label><label kind="assignment" x="72" y="-96">time = 0, 
newSecPos(id, 50)</label></transition><transition controllable="false" action=""><source ref="id5"/><target ref="id1"/><label kind="guard" x="-136" y="-112">canMove(id)</label><label kind="synchronisation" x="-80" y="-96">go!</label><label kind="assignment" x="-144" y="-88">time = 0</label></transition><transition controllable="false" action=""><source ref="id0"/><target ref="id5"/><label kind="guard" x="-152" y="-24">time == 10</label><label kind="assignment" x="-184" y="-8">newSecPos(id, 50),
trainMoved = true</label></transition><transition controllable="false" action=""><source ref="id4"/><target ref="id0"/><label kind="guard" x="40" y="8">!canMove(id)</label><label kind="synchronisation" x="96" y="-8">go!</label><label kind="assignment" x="32" y="-24">time = 0</label></transition><transition action=""><source ref="id2"/><target ref="id5"/><label kind="synchronisation" x="-264" y="-96">init_all?</label><label kind="assignment" x="-304" y="-68">trainMoved = 1</label></transition><transition controllable="false" action=""><source ref="id4"/><target ref="id4"/><label kind="guard" x="240" y="-24">canMove(id) and time == 5</label><label kind="assignment" x="240" y="-48">newSecPos(id, 50), time = 0</label><nail x="232" y="-48"/><nail x="232" y="-16"/></transition><transition controllable="false" action=""><source ref="id4"/><target ref="id3"/><label kind="guard" x="48" y="96">trainCrashed(id)</label><label kind="synchronisation" x="176" y="88">go!</label><nail x="168" y="96"/></transition><transition controllable="false" action=""><source ref="id5"/><target ref="id3"/><label kind="guard" x="-208" y="80">trainCrashed(id)</label><label kind="synchronisation" x="-200" y="56">go!</label><nail x="-160" y="64"/></transition></template><template><name>InitGraph</name><declaration>int switchCounter, lightCounter;

clock timer;
</declaration><location id="id6" x="-184" y="8"><name x="-224" y="-24">turnOnLight</name><committed/></location><location id="id7" x="72" y="8"><name x="32" y="-32">turnOffLight</name><committed/></location><location id="id8" x="72" y="-120"><name x="24" y="-160">moveSwitches</name><committed/></location><location id="id9" x="-184" y="-120"><name x="-216" y="-152">Initialized</name></location><location id="id10" x="-368" y="-200"><committed/></location><init ref="id10"/><transition action=""><source ref="id6"/><target ref="id6"/><label kind="guard" x="-432" y="0">lightCounter &lt; LIGHTS</label><label kind="assignment" x="-488" y="16">lightCounter = lightCounter + 1</label><nail x="-264" y="32"/><nail x="-264" y="0"/></transition><transition action=""><source ref="id6"/><target ref="id6"/><label kind="guard" x="-280" y="88">lightCounter &lt; LIGHTS</label><label kind="synchronisation" x="-296" y="104">lightChanOn[lightCounter]!</label><label kind="assignment" x="-312" y="72">lightCounter = lightCounter + 1</label><nail x="-176" y="72"/><nail x="-192" y="72"/><nail x="-208" y="72"/></transition><transition action=""><source ref="id6"/><target ref="id9"/><label kind="guard" x="-360" y="-88">lightCounter == LIGHTS</label><label kind="assignment" x="-304" y="-64">lightCounter = 0</label></transition><transition action=""><source ref="id7"/><target ref="id6"/><label kind="guard" x="-120" y="-8">lightCounter == LIGHTS</label><label kind="assignment" x="-96" y="8">lightCounter = 0</label></transition><transition action=""><source ref="id7"/><target ref="id7"/><label kind="guard" x="8" y="104">lightCounter &lt; LIGHTS</label><label kind="assignment" x="8" y="88">lightCounter = lightCounter + 1</label><nail x="80" y="80"/><nail x="40" y="80"/></transition><transition action=""><source ref="id8"/><target ref="id8"/><label kind="guard" x="16" y="-208">switchCounter &lt; SWITCHES</label><label kind="assignment" x="16" y="-224">switchCounter = switchCounter + 1</label><nail x="72" y="-184"/><nail x="48" y="-184"/></transition><transition action=""><source ref="id7"/><target ref="id7"/><label kind="guard" x="168" y="40">lightCounter &lt; LIGHTS</label><label kind="synchronisation" x="168" y="24">lightChanOff[lightCounter]!</label><label kind="assignment" x="168" y="8">lightCounter = lightCounter + 1</label><nail x="160" y="8"/><nail x="160" y="40"/></transition><transition action=""><source ref="id8"/><target ref="id7"/><label kind="guard" x="72" y="-80">switchCounter == SWITCHES</label><label kind="assignment" x="72" y="-64">switchCounter = 0</label></transition><transition action=""><source ref="id8"/><target ref="id8"/><label kind="guard" x="152" y="-160">switchCounter &lt; SWITCHES</label><label kind="synchronisation" x="152" y="-128">switchChan[switchCounter]!</label><label kind="assignment" x="152" y="-144">switchCounter = switchCounter + 1</label><nail x="152" y="-144"/><nail x="152" y="-120"/><nail x="128" y="-120"/></transition><transition action=""><source ref="id9"/><target ref="id8"/><label kind="guard" x="-88" y="-120">trainMoved</label><label kind="assignment" x="-112" y="-136">trainMoved = false</label></transition><transition action=""><source ref="id10"/><target ref="id9"/><label kind="synchronisation" x="-312" y="-192">init_all!</label><label kind="assignment" x="-328" y="-208">initGraph()</label></transition></template><template><name>LightA</name><parameter>l_id id</parameter><location id="id11" x="64" y="-48"><name x="88" y="-56">Green</name></location><location id="id12" x="-96" y="-48"><name x="-144" y="-56">Red</name></location><init ref="id12"/><transition action=""><source ref="id11"/><target ref="id12"/><label kind="synchronisation" x="-88" y="48">lightChanOff[id]?</label><label kind="assignment" x="-88" y="24">updateLight(id,0),
oneGreen = false</label><nail x="16" y="24"/><nail x="-64" y="24"/></transition><transition action=""><source ref="id12"/><target ref="id11"/><label kind="guard" x="-80" y="-88">oneGreen == false
&amp;&amp; hasTrain(id)</label><label kind="synchronisation" x="-80" y="-64">lightChanOn[id]?</label><label kind="assignment" x="-80" y="-112">updateLight(id,1),
oneGreen = true</label></transition></template><template><name>SwitchA</name><parameter>s_id id</parameter><location id="id13" x="0" y="-40"><name x="-10" y="-70">Angled</name></location><location id="id14" x="-128" y="-40"><name x="-168" y="-72">Straight</name></location><init ref="id14"/><transition action=""><source ref="id13"/><target ref="id14"/><label kind="guard" x="-120" y="16">canSwitch(id)</label><label kind="synchronisation" x="-120" y="32">switchChan[id]?</label><label kind="assignment" x="-136" y="0">updateSwitch(id, 0)</label><nail x="-40" y="-8"/><nail x="-104" y="-8"/></transition><transition action=""><source ref="id14"/><target ref="id13"/><label kind="guard" x="-120" y="-88">canSwitch(id)</label><label kind="synchronisation" x="-128" y="-120">switchChan[id]?</label><label kind="assignment" x="-144" y="-104">updateSwitch(id, 1)</label><nail x="-104" y="-64"/><nail x="-40" y="-64"/></transition></template><system>// Place template instantiations here.
// List one or more processes to be composed into a system.
system Train, InitGraph, LightA, SwitchA;</system></nta>